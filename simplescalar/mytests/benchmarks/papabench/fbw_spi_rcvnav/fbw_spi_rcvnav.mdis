
fbw_spi_2:     file format ss-coff-little

Disassembly of section .text:
00400140 <__start> lw $16,0($29)
00400148 <__start+0x8> lui $28,4097
00400150 <__start+0x10> addiu $28,$28,-32032
00400158 <__start+0x18> addiu $17,$29,4
00400160 <__start+0x20> addiu $3,$17,4
00400168 <__start+0x28> sll $2,$16,0x2
00400170 <__start+0x30> addu $3,$3,$2
00400178 <__start+0x38> addu $18,$0,$3
00400180 <__start+0x40> sw $18,-32556($28)
00400188 <__start+0x48> addiu $29,$29,-24
00400190 <__start+0x50> addu $4,$0,$16
00400198 <__start+0x58> addu $5,$0,$17
004001a0 <__start+0x60> addu $6,$0,$18
004001a8 <__start+0x68> jal 00400920 <__libc_init>
004001b0 <__start+0x70> sw $0,-32560($28)
004001b8 <__start+0x78> addu $4,$0,$16
004001c0 <__start+0x80> addu $5,$0,$17
004001c8 <__start+0x88> addu $6,$0,$18
004001d0 <__start+0x90> jal 00400808 <main>
004001d8 <__start+0x98> addu $4,$0,$2
004001e0 <__start+0xa0> jal 00400950 <exit>
004001e8 <__start+0xa8> nop 
servo_set():
fbw_spi_2.c:191
/**
 * defines how servos react to radio control or autopilot channels
 */
void servo_set(const pprz_t values[])
{
004001f0 <servo_set> addiu $29,$29,-16
004001f8 <servo_set+0x8> sw $30,8($29)
00400200 <servo_set+0x10> addu $30,$0,$29
00400208 <servo_set+0x18> sw $4,16($30)
fbw_spi_2.c:195
  // ServoSet(values); /*Generated from airframe.xml */
  uint16_t servo_value;
  int16_t _var_roll;
  servo_value = SERVO_NEUTRAL(SERVO_MOTOR_LEFT) +
00400210 <servo_set+0x20> lw $3,16($30)
00400218 <servo_set+0x28> addiu $2,$3,10
00400220 <servo_set+0x30> lh $3,0($2)
00400228 <servo_set+0x38> addu $2,$0,$3
00400230 <servo_set+0x40> sll $3,$2,0x1
00400238 <servo_set+0x48> mtc1 $3,$f4
00400240 <servo_set+0x50> cvt.d.w $f4,$f4
00400248 <servo_set+0x58> l.d $f6,-32760($28)
00400250 <servo_set+0x60> mul.d $f4,$f4,$f6
00400258 <servo_set+0x68> cvt.w.d $f8,$f4
00400260 <servo_set+0x70> mfc1 $3,$f8
00400268 <servo_set+0x78> addu $2,$0,$3
00400270 <servo_set+0x80> addiu $3,$2,16000
00400278 <servo_set+0x88> sh $3,0($30)
fbw_spi_2.c:197
    (int16_t)((2 * values[RADIO_GAIN1]) * SERVO_MOTOR_LEFT_TRAVEL);
  servo_widths[SERVO_MOTOR_LEFT] = ChopServo(servo_value);
00400280 <servo_set+0x90> lhu $2,0($30)
00400288 <servo_set+0x98> sltiu $3,$2,16000
00400290 <servo_set+0xa0> bne $3,$0,004002c8 <servo_set+0xd8>
00400298 <servo_set+0xa8> lhu $2,0($30)
004002a0 <servo_set+0xb0> andi $3,$2,65535
004002a8 <servo_set+0xb8> sltiu $4,$3,32001
004002b0 <servo_set+0xc0> bne $4,$0,004002c0 <servo_set+0xd0>
004002b8 <servo_set+0xc8> addiu $2,$0,32000
004002c0 <servo_set+0xd0> j 004002d0 <servo_set+0xe0>
004002c8 <servo_set+0xd8> addiu $2,$0,16000
004002d0 <servo_set+0xe0> lui $1,4096
004002d8 <servo_set+0xe8> sh $2,1046($1)
fbw_spi_2.c:199

  servo_value = SERVO_NEUTRAL(SERVO_MOTOR_RIGHT) + 
004002e0 <servo_set+0xf0> lw $2,16($30)
004002e8 <servo_set+0xf8> lh $3,0($2)
004002f0 <servo_set+0x100> addu $2,$0,$3
004002f8 <servo_set+0x108> sll $3,$2,0x1
00400300 <servo_set+0x110> mtc1 $3,$f4
00400308 <servo_set+0x118> cvt.d.w $f4,$f4
00400310 <servo_set+0x120> l.d $f6,-32760($28)
00400318 <servo_set+0x128> mul.d $f4,$f4,$f6
00400320 <servo_set+0x130> cvt.w.d $f8,$f4
00400328 <servo_set+0x138> mfc1 $3,$f8
00400330 <servo_set+0x140> addu $2,$0,$3
00400338 <servo_set+0x148> addiu $3,$2,16000
00400340 <servo_set+0x150> sh $3,0($30)
fbw_spi_2.c:201
    (int16_t)((2 * values[RADIO_THROTTLE]) * SERVO_MOTOR_RIGHT_TRAVEL);
  servo_widths[SERVO_MOTOR_RIGHT] = ChopServo(servo_value);
00400348 <servo_set+0x158> lhu $2,0($30)
00400350 <servo_set+0x160> sltiu $3,$2,16000
00400358 <servo_set+0x168> bne $3,$0,00400390 <servo_set+0x1a0>
00400360 <servo_set+0x170> lhu $2,0($30)
00400368 <servo_set+0x178> andi $3,$2,65535
00400370 <servo_set+0x180> sltiu $4,$3,32001
00400378 <servo_set+0x188> bne $4,$0,00400388 <servo_set+0x198>
00400380 <servo_set+0x190> addiu $2,$0,32000
00400388 <servo_set+0x198> j 00400398 <servo_set+0x1a8>
00400390 <servo_set+0x1a0> addiu $2,$0,16000
00400398 <servo_set+0x1a8> lui $1,4096
004003a0 <servo_set+0x1b0> sh $2,1058($1)
fbw_spi_2.c:203

  servo_value = SERVO_NEUTRAL(SERVO_ELEVATOR) + 
004003a8 <servo_set+0x1b8> lw $3,16($30)
004003b0 <servo_set+0x1c0> addiu $2,$3,4
004003b8 <servo_set+0x1c8> lh $3,0($2)
004003c0 <servo_set+0x1d0> mtc1 $3,$f4
004003c8 <servo_set+0x1d8> cvt.d.w $f4,$f4
004003d0 <servo_set+0x1e0> l.d $f6,-32752($28)
004003d8 <servo_set+0x1e8> mul.d $f4,$f4,$f6
004003e0 <servo_set+0x1f0> cvt.w.d $f8,$f4
004003e8 <servo_set+0x1f8> mfc1 $3,$f8
004003f0 <servo_set+0x200> addu $2,$0,$3
004003f8 <servo_set+0x208> addiu $3,$2,24480
00400400 <servo_set+0x210> sh $3,0($30)
fbw_spi_2.c:205
    (int16_t)((values[RADIO_PITCH]) * SERVO_ELEVATOR_TRAVEL);
  servo_widths[SERVO_ELEVATOR] = ChopServo(servo_value);
00400408 <servo_set+0x218> lhu $2,0($30)
00400410 <servo_set+0x220> sltiu $3,$2,16000
00400418 <servo_set+0x228> bne $3,$0,00400450 <servo_set+0x260>
00400420 <servo_set+0x230> lhu $2,0($30)
00400428 <servo_set+0x238> andi $3,$2,65535
00400430 <servo_set+0x240> sltiu $4,$3,32001
00400438 <servo_set+0x248> bne $4,$0,00400448 <servo_set+0x258>
00400440 <servo_set+0x250> addiu $2,$0,32000
00400448 <servo_set+0x258> j 00400458 <servo_set+0x268>
00400450 <servo_set+0x260> addiu $2,$0,16000
00400458 <servo_set+0x268> lui $1,4096
00400460 <servo_set+0x270> sh $2,1052($1)
fbw_spi_2.c:207

  _var_roll = values[RADIO_ROLL];
00400468 <servo_set+0x278> lw $3,16($30)
00400470 <servo_set+0x280> addiu $2,$3,2
00400478 <servo_set+0x288> lhu $3,0($2)
00400480 <servo_set+0x290> sh $3,2($30)
fbw_spi_2.c:208
  servo_value = SERVO_NEUTRAL(SERVO_AILERON_LEFT) + 
00400488 <servo_set+0x298> lh $2,2($30)
00400490 <servo_set+0x2a0> mtc1 $2,$f0
00400498 <servo_set+0x2a8> cvt.d.w $f0,$f0
004004a0 <servo_set+0x2b0> lh $2,2($30)
004004a8 <servo_set+0x2b8> bgtz $2,00400510 <servo_set+0x320>
004004b0 <servo_set+0x2c0> l.d $f6,-32744($28)
004004b8 <servo_set+0x2c8> mul.d $f4,$f0,$f6
004004c0 <servo_set+0x2d0> l.d $f6,-32736($28)
004004c8 <servo_set+0x2d8> mul.d $f4,$f4,$f6
004004d0 <servo_set+0x2e0> cvt.w.d $f8,$f4
004004d8 <servo_set+0x2e8> mfc1 $3,$f8
004004e0 <servo_set+0x2f0> addu $2,$0,$3
004004e8 <servo_set+0x2f8> sll $3,$2,0x10
004004f0 <servo_set+0x300> sra $2,$3,0x10
004004f8 <servo_set+0x308> addiu $3,$2,25600
00400500 <servo_set+0x310> addu $2,$0,$3
00400508 <servo_set+0x318> j 00400558 <servo_set+0x368>
00400510 <servo_set+0x320> l.d $f6,-32736($28)
00400518 <servo_set+0x328> mul.d $f4,$f0,$f6
00400520 <servo_set+0x330> cvt.w.d $f8,$f4
00400528 <servo_set+0x338> mfc1 $4,$f8
00400530 <servo_set+0x340> addu $3,$0,$4
00400538 <servo_set+0x348> sll $4,$3,0x10
00400540 <servo_set+0x350> sra $3,$4,0x10
00400548 <servo_set+0x358> addiu $4,$3,25600
00400550 <servo_set+0x360> addu $2,$0,$4
00400558 <servo_set+0x368> sh $2,0($30)
fbw_spi_2.c:210
    (int16_t)(((_var_roll > 0 ? 1 : AILERON_DIFF) * _var_roll) * SERVO_AILERON_LEFT_TRAVEL);
  servo_widths[SERVO_AILERON_LEFT] = ChopServo(servo_value);
00400560 <servo_set+0x370> lhu $2,0($30)
00400568 <servo_set+0x378> sltiu $3,$2,16000
00400570 <servo_set+0x380> bne $3,$0,004005a8 <servo_set+0x3b8>
00400578 <servo_set+0x388> lhu $2,0($30)
00400580 <servo_set+0x390> andi $3,$2,65535
00400588 <servo_set+0x398> sltiu $4,$3,32001
00400590 <servo_set+0x3a0> bne $4,$0,004005a0 <servo_set+0x3b0>
00400598 <servo_set+0x3a8> addiu $2,$0,32000
004005a0 <servo_set+0x3b0> j 004005b0 <servo_set+0x3c0>
004005a8 <servo_set+0x3b8> addiu $2,$0,16000
004005b0 <servo_set+0x3c0> lui $1,4096
004005b8 <servo_set+0x3c8> sh $2,1040($1)
fbw_spi_2.c:212

  servo_value = SERVO_NEUTRAL(SERVO_AILERON_RIGHT) + 
004005c0 <servo_set+0x3d0> lh $2,2($30)
004005c8 <servo_set+0x3d8> mtc1 $2,$f2
004005d0 <servo_set+0x3e0> cvt.d.w $f2,$f2
004005d8 <servo_set+0x3e8> lh $2,2($30)
004005e0 <servo_set+0x3f0> blez $2,00400648 <servo_set+0x458>
004005e8 <servo_set+0x3f8> l.d $f6,-32744($28)
004005f0 <servo_set+0x400> mul.d $f4,$f2,$f6
004005f8 <servo_set+0x408> l.d $f6,-32728($28)
00400600 <servo_set+0x410> mul.d $f4,$f4,$f6
00400608 <servo_set+0x418> cvt.w.d $f8,$f4
00400610 <servo_set+0x420> mfc1 $3,$f8
00400618 <servo_set+0x428> addu $2,$0,$3
00400620 <servo_set+0x430> sll $3,$2,0x10
00400628 <servo_set+0x438> sra $2,$3,0x10
00400630 <servo_set+0x440> addiu $3,$2,26400
00400638 <servo_set+0x448> addu $2,$0,$3
00400640 <servo_set+0x450> j 00400690 <servo_set+0x4a0>
00400648 <servo_set+0x458> l.d $f6,-32728($28)
00400650 <servo_set+0x460> mul.d $f4,$f2,$f6
00400658 <servo_set+0x468> cvt.w.d $f8,$f4
00400660 <servo_set+0x470> mfc1 $4,$f8
00400668 <servo_set+0x478> addu $3,$0,$4
00400670 <servo_set+0x480> sll $4,$3,0x10
00400678 <servo_set+0x488> sra $3,$4,0x10
00400680 <servo_set+0x490> addiu $4,$3,26400
00400688 <servo_set+0x498> addu $2,$0,$4
00400690 <servo_set+0x4a0> sh $2,0($30)
fbw_spi_2.c:214
    (int16_t)(((_var_roll > 0 ? AILERON_DIFF : 1) * _var_roll) * SERVO_AILERON_RIGHT_TRAVEL);
  servo_widths[SERVO_AILERON_RIGHT] = ChopServo(servo_value);
00400698 <servo_set+0x4a8> lhu $2,0($30)
004006a0 <servo_set+0x4b0> sltiu $3,$2,16000
004006a8 <servo_set+0x4b8> bne $3,$0,004006e0 <servo_set+0x4f0>
004006b0 <servo_set+0x4c0> lhu $2,0($30)
004006b8 <servo_set+0x4c8> andi $3,$2,65535
004006c0 <servo_set+0x4d0> sltiu $4,$3,32001
004006c8 <servo_set+0x4d8> bne $4,$0,004006d8 <servo_set+0x4e8>
004006d0 <servo_set+0x4e0> addiu $2,$0,32000
004006d8 <servo_set+0x4e8> j 004006e8 <servo_set+0x4f8>
004006e0 <servo_set+0x4f0> addiu $2,$0,16000
004006e8 <servo_set+0x4f8> lui $1,4096
004006f0 <servo_set+0x500> sh $2,1044($1)
fbw_spi_2.c:216

  servo_value = SERVO_NEUTRAL(SERVO_RUDDER) + 
004006f8 <servo_set+0x508> lw $3,16($30)
00400700 <servo_set+0x510> addiu $2,$3,6
00400708 <servo_set+0x518> lh $3,0($2)
00400710 <servo_set+0x520> mtc1 $3,$f4
00400718 <servo_set+0x528> cvt.d.w $f4,$f4
00400720 <servo_set+0x530> lw $3,16($30)
00400728 <servo_set+0x538> addiu $2,$3,2
00400730 <servo_set+0x540> lh $3,0($2)
00400738 <servo_set+0x548> mtc1 $3,$f6
00400740 <servo_set+0x550> cvt.d.w $f6,$f6
00400748 <servo_set+0x558> add.d $f4,$f4,$f6
00400750 <servo_set+0x560> l.d $f6,-32720($28)
00400758 <servo_set+0x568> mul.d $f4,$f4,$f6
00400760 <servo_set+0x570> cvt.w.d $f8,$f4
00400768 <servo_set+0x578> mfc1 $3,$f8
00400770 <servo_set+0x580> addu $2,$0,$3
00400778 <servo_set+0x588> addiu $3,$2,23200
00400780 <servo_set+0x590> sh $3,0($30)
fbw_spi_2.c:218
    (int16_t)((values[RADIO_YAW] + values[RADIO_ROLL] * COMBI_SWITCH) * SERVO_RUDDER_TRAVEL);
  servo_widths[SERVO_RUDDER] = ChopServo(servo_value);
00400788 <servo_set+0x598> lhu $2,0($30)
00400790 <servo_set+0x5a0> sltiu $3,$2,16000
00400798 <servo_set+0x5a8> bne $3,$0,004007d0 <servo_set+0x5e0>
004007a0 <servo_set+0x5b0> lhu $2,0($30)
004007a8 <servo_set+0x5b8> andi $3,$2,65535
004007b0 <servo_set+0x5c0> sltiu $4,$3,32001
004007b8 <servo_set+0x5c8> bne $4,$0,004007c8 <servo_set+0x5d8>
004007c0 <servo_set+0x5d0> addiu $2,$0,32000
004007c8 <servo_set+0x5d8> j 004007d8 <servo_set+0x5e8>
004007d0 <servo_set+0x5e0> addiu $2,$0,16000
004007d8 <servo_set+0x5e8> lui $1,4096
004007e0 <servo_set+0x5f0> sh $2,1054($1)
fbw_spi_2.c:219
}
004007e8 <servo_set+0x5f8> addu $29,$0,$30
004007f0 <servo_set+0x600> lw $30,8($29)
004007f8 <servo_set+0x608> addiu $29,$29,16
00400800 <servo_set+0x610> jr $31
main():
fbw_spi_2.c:228


//#include "mpi.h"


/** fly_by_wire/main.c */
// void check_mega128_values_task(void)
int main()
{
00400808 <main> addiu $29,$29,-280
00400810 <main+0x8> sw $31,276($29)
00400818 <main+0x10> sw $30,272($29)
00400820 <main+0x18> addu $30,$0,$29
fbw_spi_2.c:229
  if ( !SpiIsSelected() && spi_was_interrupted ) 
00400828 <main+0x20> lbu $2,-32540($28)
00400830 <main+0x28> andi $3,$2,4
00400838 <main+0x30> andi $2,$3,255
00400840 <main+0x38> beq $2,$0,004008c0 <main+0xb8>
00400848 <main+0x40> lbu $3,-32764($28)
00400850 <main+0x48> andi $2,$3,255
00400858 <main+0x50> beq $2,$0,004008c0 <main+0xb8>
fbw_spi_2.c:231
  {
    if (mega128_receive_valid)
00400860 <main+0x58> lbu $3,-32768($28)
00400868 <main+0x60> andi $2,$3,255
00400870 <main+0x68> beq $2,$0,004008c0 <main+0xb8>
fbw_spi_2.c:233
    {
      time_since_last_mega128 = 0;
00400878 <main+0x70> sb $0,-32592($28)
fbw_spi_2.c:234
      mega128_ok = TRUE;
00400880 <main+0x78> addiu $2,$0,1
00400888 <main+0x80> sb $2,-32542($28)
fbw_spi_2.c:235
      if (mode == MODE_AUTO)
00400890 <main+0x88> lbu $2,-32544($28)
00400898 <main+0x90> addiu $3,$0,1
004008a0 <main+0x98> bne $2,$3,004008c0 <main+0xb8>
fbw_spi_2.c:236
	servo_set(from_mega128.channels);
004008a8 <main+0xa0> lui $4,4096
004008b0 <main+0xa8> addiu $4,$4,1072
004008b8 <main+0xb0> jal 004001f0 <servo_set>
fbw_spi_2.c:239
    }
  }
  if (time_since_last_mega128 == STALLED_TIME)
004008c0 <main+0xb8> lbu $2,-32592($28)
004008c8 <main+0xc0> addiu $3,$0,30
004008d0 <main+0xc8> bne $2,$3,004008e0 <main+0xd8>
fbw_spi_2.c:241
  {
    mega128_ok = FALSE;
004008d8 <main+0xd0> sb $0,-32542($28)
fbw_spi_2.c:248
  }

  {
    //MPI_Comm intercomm;
    char str[256];

    str[0] = 'S';
004008e0 <main+0xd8> addiu $2,$0,83
004008e8 <main+0xe0> sb $2,16($30)
fbw_spi_2.c:249
    str[1] = '\0';
004008f0 <main+0xe8> sb $0,17($30)
fbw_spi_2.c:253
    //MPI_Isend(str, 1, MPI_CHAR, 1, 0, intercomm, NULL);

  }
}
004008f8 <main+0xf0> addu $29,$0,$30
00400900 <main+0xf8> lw $31,276($29)
00400908 <main+0x100> lw $30,272($29)
00400910 <main+0x108> addiu $29,$29,280
00400918 <main+0x110> jr $31
