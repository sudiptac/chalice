
ap_spi_2:     file format ss-coff-little

Disassembly of section .text:
00400140 <__start> lw $16,0($29)
00400148 <__start+0x8> lui $28,4097
00400150 <__start+0x10> addiu $28,$28,-32032
00400158 <__start+0x18> addiu $17,$29,4
00400160 <__start+0x20> addiu $3,$17,4
00400168 <__start+0x28> sll $2,$16,0x2
00400170 <__start+0x30> addu $3,$3,$2
00400178 <__start+0x38> addu $18,$0,$3
00400180 <__start+0x40> sw $18,-32508($28)
00400188 <__start+0x48> addiu $29,$29,-24
00400190 <__start+0x50> addu $4,$0,$16
00400198 <__start+0x58> addu $5,$0,$17
004001a0 <__start+0x60> addu $6,$0,$18
004001a8 <__start+0x68> jal 004008b0 <__libc_init>
004001b0 <__start+0x70> sw $0,-32512($28)
004001b8 <__start+0x78> addu $4,$0,$16
004001c0 <__start+0x80> addu $5,$0,$17
004001c8 <__start+0x88> addu $6,$0,$18
004001d0 <__start+0x90> jal 004006d0 <main>
004001d8 <__start+0x98> addu $4,$0,$2
004001e0 <__start+0xa0> jal 004008e0 <exit>
004001e8 <__start+0xa8> nop 
EventUpdate():
ap_spi_2.c:303
/** autopilot/main.c */
/** Delay between @@@@@ A FIXER @@@@@ */
#define EVENT_DELAY 20
void EventUpdate( uint16_t _cpt, bool_t _cond, bool_t _event )
{
004001f0 <EventUpdate> addiu $29,$29,-16
004001f8 <EventUpdate+0x8> sw $30,8($29)
00400200 <EventUpdate+0x10> addu $30,$0,$29
00400208 <EventUpdate+0x18> addu $2,$0,$4
00400210 <EventUpdate+0x20> addu $3,$0,$5
00400218 <EventUpdate+0x28> addu $4,$0,$6
00400220 <EventUpdate+0x30> sh $2,0($30)
00400228 <EventUpdate+0x38> sb $3,2($30)
00400230 <EventUpdate+0x40> sb $4,3($30)
ap_spi_2.c:304
  if (_cond)
00400238 <EventUpdate+0x48> lbu $5,2($30)
00400240 <EventUpdate+0x50> beq $5,$0,004002b0 <EventUpdate+0xc0>
ap_spi_2.c:306
  {
    if (_cpt < EVENT_DELAY)
00400248 <EventUpdate+0x58> lhu $5,0($30)
00400250 <EventUpdate+0x60> sltiu $6,$5,20
00400258 <EventUpdate+0x68> beq $6,$0,004002a8 <EventUpdate+0xb8>
ap_spi_2.c:308
    {
      _cpt++;
00400260 <EventUpdate+0x70> lhu $5,0($30)
00400268 <EventUpdate+0x78> addiu $6,$5,1
00400270 <EventUpdate+0x80> addu $5,$0,$6
00400278 <EventUpdate+0x88> sh $5,0($30)
ap_spi_2.c:309
      if (_cpt == EVENT_DELAY)
00400280 <EventUpdate+0x90> lhu $5,0($30)
00400288 <EventUpdate+0x98> addiu $6,$0,20
00400290 <EventUpdate+0xa0> bne $5,$6,004002a8 <EventUpdate+0xb8>
ap_spi_2.c:310
        _event = TRUE;
00400298 <EventUpdate+0xa8> addiu $5,$0,1
004002a0 <EventUpdate+0xb0> sb $5,3($30)
ap_spi_2.c:312
    }
  }
004002a8 <EventUpdate+0xb8> j 004002c0 <EventUpdate+0xd0>
ap_spi_2.c:315
  else
  {
    _cpt = 0;
004002b0 <EventUpdate+0xc0> sh $0,0($30)
ap_spi_2.c:316
    _event = FALSE;
004002b8 <EventUpdate+0xc8> sb $0,3($30)
ap_spi_2.c:318
  }
}
004002c0 <EventUpdate+0xd0> addu $29,$0,$30
004002c8 <EventUpdate+0xd8> lw $30,8($29)
004002d0 <EventUpdate+0xe0> addiu $29,$29,16
004002d8 <EventUpdate+0xe8> jr $31
ir_gain_calib():
ap_spi_2.c:330

#define EventPos(_cpt, _channel, _event) EventUpdate(_cpt, (inflight_calib_mode==IF_CALIB_MODE_NONE && from_fbw.channels[_channel]>(int)(0.75*MAX_PPRZ)), _event)
#define EventNeg(_cpt, _channel, _event) EventUpdate(_cpt, (inflight_calib_mode==IF_CALIB_MODE_NONE && from_fbw.channels[_channel]<(int)(-0.75*MAX_PPRZ)), _event)



/** autopilot/infrared.c */
/**
 * Contrast measurement
 */
void ir_gain_calib(void)   // Plane nose down
{
004002e0 <ir_gain_calib> addiu $29,$29,-8
004002e8 <ir_gain_calib+0x8> sw $30,0($29)
004002f0 <ir_gain_calib+0x10> addu $30,$0,$29
ap_spi_2.c:332
  /* plane nose down -> negativ value */
  ir_contrast = - ir_pitch;
004002f8 <ir_gain_calib+0x18> lhu $2,-32492($28)
00400300 <ir_gain_calib+0x20> subu $3,$0,$2
00400308 <ir_gain_calib+0x28> sh $3,-32744($28)
ap_spi_2.c:333
  RadOfIrFromConstrast(ir_contrast);
00400310 <ir_gain_calib+0x30> lh $2,-32744($28)
00400318 <ir_gain_calib+0x38> mtc1 $2,$f0
00400320 <ir_gain_calib+0x40> cvt.d.w $f0,$f0
00400328 <ir_gain_calib+0x48> l.d $f2,-32696($28)
00400330 <ir_gain_calib+0x50> div.d $f0,$f2,$f0
00400338 <ir_gain_calib+0x58> cvt.s.d $f2,$f0
00400340 <ir_gain_calib+0x60> s.s $f2,-32732($28)
ap_spi_2.c:334
}
00400348 <ir_gain_calib+0x68> addu $29,$0,$30
00400350 <ir_gain_calib+0x70> lw $30,0($29)
00400358 <ir_gain_calib+0x78> addiu $29,$29,8
00400360 <ir_gain_calib+0x80> jr $31
ground_calibrate():
ap_spi_2.c:349


//#include "mpi.h"


/** autopilot/main.c */
/** \fn  void ground_calibrate( void )
 *  \brief Calibrate contrast if paparazzi mode is
 * set to auto1 before MAX_DELAY_FOR_CALIBRATION secondes */
/**User must put verticaly the uav (nose bottom) and push
 * radio roll stick to get new calibration
 * If not, the default calibration is used.
 */
void ground_calibrate( void )
{
00400368 <ground_calibrate> addiu $29,$29,-280
00400370 <ground_calibrate+0x8> sw $31,276($29)
00400378 <ground_calibrate+0x10> sw $30,272($29)
00400380 <ground_calibrate+0x18> addu $30,$0,$29
ap_spi_2.c:354
  //MPI_Comm intercomm;
  char str[256];

  static uint8_t calib_status = NO_CALIB;
  switch (calib_status)
00400388 <ground_calibrate+0x20> lbu $2,-32688($28)
00400390 <ground_calibrate+0x28> addiu $3,$0,1
00400398 <ground_calibrate+0x30> beq $2,$3,00400450 <ground_calibrate+0xe8>
004003a0 <ground_calibrate+0x38> slti $3,$2,2
004003a8 <ground_calibrate+0x40> beq $3,$0,004003c0 <ground_calibrate+0x58>
004003b0 <ground_calibrate+0x48> beq $2,$0,004003d8 <ground_calibrate+0x70>
004003b8 <ground_calibrate+0x50> j 00400590 <ground_calibrate+0x228>
004003c0 <ground_calibrate+0x58> addiu $3,$0,2
004003c8 <ground_calibrate+0x60> beq $2,$3,00400588 <ground_calibrate+0x220>
004003d0 <ground_calibrate+0x68> j 00400590 <ground_calibrate+0x228>
ap_spi_2.c:357
  {
    case NO_CALIB:
      if (cputime < MAX_DELAY_FOR_CALIBRATION && pprz_mode == PPRZ_MODE_AUTO1 )
004003d8 <ground_calibrate+0x70> lhu $2,-32708($28)
004003e0 <ground_calibrate+0x78> sltiu $3,$2,10
004003e8 <ground_calibrate+0x80> beq $3,$0,00400448 <ground_calibrate+0xe0>
004003f0 <ground_calibrate+0x88> lbu $2,-32752($28)
004003f8 <ground_calibrate+0x90> addiu $3,$0,1
00400400 <ground_calibrate+0x98> bne $2,$3,00400448 <ground_calibrate+0xe0>
ap_spi_2.c:359
      {
	calib_status = WAITING_CALIB_CONTRAST;
00400408 <ground_calibrate+0xa0> addiu $2,$0,1
00400410 <ground_calibrate+0xa8> sb $2,-32688($28)
ap_spi_2.c:361
	// DOWNLINK_SEND_CALIB_START();
	str[0] = 'M';
00400418 <ground_calibrate+0xb0> addiu $2,$0,77
00400420 <ground_calibrate+0xb8> sb $2,16($30)
ap_spi_2.c:362
	str[1] = '\0';
00400428 <ground_calibrate+0xc0> sb $0,17($30)
ap_spi_2.c:363
	str[2] = 'S';
00400430 <ground_calibrate+0xc8> addiu $2,$0,83
00400438 <ground_calibrate+0xd0> sb $2,18($30)
ap_spi_2.c:364
	str[3] = '\0';
00400440 <ground_calibrate+0xd8> sb $0,19($30)
ap_spi_2.c:368
	//MPI_Isend(str, 1, MPI_CHAR, 1, 0, intercomm, NULL);

      }
      break;
00400448 <ground_calibrate+0xe0> j 00400590 <ground_calibrate+0x228>
ap_spi_2.c:370
    case WAITING_CALIB_CONTRAST:
      if (STICK_PUSHED(from_fbw.channels[RADIO_ROLL]))
00400450 <ground_calibrate+0xe8> lui $2,4096
00400458 <ground_calibrate+0xf0> lh $2,1154($2)
00400460 <ground_calibrate+0xf8> slti $3,$2,-4800
00400468 <ground_calibrate+0x100> bne $3,$0,00400498 <ground_calibrate+0x130>
00400470 <ground_calibrate+0x108> lui $2,4096
00400478 <ground_calibrate+0x110> lh $2,1154($2)
00400480 <ground_calibrate+0x118> slti $3,$2,3201
00400488 <ground_calibrate+0x120> beq $3,$0,00400498 <ground_calibrate+0x130>
00400490 <ground_calibrate+0x128> j 00400580 <ground_calibrate+0x218>
ap_spi_2.c:372
      {
	ir_gain_calib();
00400498 <ground_calibrate+0x130> jal 004002e0 <ir_gain_calib>
ap_spi_2.c:373
	estimator_rad_of_ir = ir_rad_of_ir;
004004a0 <ground_calibrate+0x138> l.s $f0,-32732($28)
004004a8 <ground_calibrate+0x140> s.s $f0,-32488($28)
ap_spi_2.c:375
	//DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
	calib_status = CALIB_DONE;
004004b0 <ground_calibrate+0x148> addiu $2,$0,2
004004b8 <ground_calibrate+0x150> sb $2,-32688($28)
ap_spi_2.c:378
	//DOWNLINK_SEND_CALIB_CONTRAST(&ir_contrast);

	str[0] = 'M';
004004c0 <ground_calibrate+0x158> addiu $2,$0,77
004004c8 <ground_calibrate+0x160> sb $2,16($30)
ap_spi_2.c:379
	str[1] = '\0';
004004d0 <ground_calibrate+0x168> sb $0,17($30)
ap_spi_2.c:380
	str[2] = 'C';
004004d8 <ground_calibrate+0x170> addiu $2,$0,67
004004e0 <ground_calibrate+0x178> sb $2,18($30)
ap_spi_2.c:381
	str[3] = '\0';
004004e8 <ground_calibrate+0x180> sb $0,19($30)
ap_spi_2.c:384

	// encoding???
	str[4] = (char) estimator_ir;
004004f0 <ground_calibrate+0x188> l.s $f0,-32476($28)
004004f8 <ground_calibrate+0x190> cvt.w.s $f2,$f0
00400500 <ground_calibrate+0x198> mfc1 $2,$f2
00400508 <ground_calibrate+0x1a0> sb $2,20($30)
ap_spi_2.c:385
	str[5] = (char) estimator_rad;
00400510 <ground_calibrate+0x1a8> l.s $f0,-32456($28)
00400518 <ground_calibrate+0x1b0> cvt.w.s $f2,$f0
00400520 <ground_calibrate+0x1b8> mfc1 $2,$f2
00400528 <ground_calibrate+0x1c0> sb $2,21($30)
ap_spi_2.c:386
	str[6] = (char) estimator_rad_of_ir;
00400530 <ground_calibrate+0x1c8> l.s $f0,-32488($28)
00400538 <ground_calibrate+0x1d0> cvt.w.s $f2,$f0
00400540 <ground_calibrate+0x1d8> mfc1 $2,$f2
00400548 <ground_calibrate+0x1e0> sb $2,22($30)
ap_spi_2.c:387
	str[7] = (char) ir_roll_neutral;
00400550 <ground_calibrate+0x1e8> lbu $2,-32740($28)
00400558 <ground_calibrate+0x1f0> sb $2,23($30)
ap_spi_2.c:388
	str[8] = (char) ir_pitch_neutral;
00400560 <ground_calibrate+0x1f8> lbu $2,-32736($28)
00400568 <ground_calibrate+0x200> sb $2,24($30)
ap_spi_2.c:389
	str[9] = (char) ir_contrast;
00400570 <ground_calibrate+0x208> lbu $2,-32744($28)
00400578 <ground_calibrate+0x210> sb $2,25($30)
ap_spi_2.c:393

	//MPI_Isend(str, 1, MPI_CHAR, 1, 0, intercomm, NULL);
      }
      break;
00400580 <ground_calibrate+0x218> j 00400590 <ground_calibrate+0x228>
ap_spi_2.c:395
    case CALIB_DONE:
      break;
00400588 <ground_calibrate+0x220> j 00400590 <ground_calibrate+0x228>
ap_spi_2.c:397
  }
}
00400590 <ground_calibrate+0x228> addu $29,$0,$30
00400598 <ground_calibrate+0x230> lw $31,276($29)
004005a0 <ground_calibrate+0x238> lw $30,272($29)
004005a8 <ground_calibrate+0x240> addiu $29,$29,280
004005b0 <ground_calibrate+0x248> jr $31
events_update():
ap_spi_2.c:402


/** autopilot/main.c */
static void events_update( void )
{
004005b8 <events_update> addiu $29,$29,-24
004005c0 <events_update+0x8> sw $31,20($29)
004005c8 <events_update+0x10> sw $30,16($29)
004005d0 <events_update+0x18> addu $30,$0,$29
ap_spi_2.c:405
  static uint16_t event1_cpt = 0;
  static uint16_t event2_cpt = 0;
  EventPos(event1_cpt, RADIO_GAIN1, rc_event_1);
004005d8 <events_update+0x20> lhu $2,-32684($28)
004005e0 <events_update+0x28> addu $3,$0,$0
004005e8 <events_update+0x30> lbu $4,-32704($28)
004005f0 <events_update+0x38> bne $4,$0,00400620 <events_update+0x68>
004005f8 <events_update+0x40> lui $4,4096
00400600 <events_update+0x48> lh $4,1162($4)
00400608 <events_update+0x50> slti $5,$4,7201
00400610 <events_update+0x58> bne $5,$0,00400620 <events_update+0x68>
00400618 <events_update+0x60> addiu $3,$0,1
00400620 <events_update+0x68> lbu $6,-32494($28)
00400628 <events_update+0x70> addu $4,$0,$2
00400630 <events_update+0x78> addu $5,$0,$3
00400638 <events_update+0x80> jal 004001f0 <EventUpdate>
ap_spi_2.c:406
  EventNeg(event2_cpt, RADIO_GAIN1, rc_event_2);
00400640 <events_update+0x88> lhu $2,-32680($28)
00400648 <events_update+0x90> addu $3,$0,$0
00400650 <events_update+0x98> lbu $4,-32704($28)
00400658 <events_update+0xa0> bne $4,$0,00400688 <events_update+0xd0>
00400660 <events_update+0xa8> lui $4,4096
00400668 <events_update+0xb0> lh $4,1162($4)
00400670 <events_update+0xb8> slti $5,$4,-7200
00400678 <events_update+0xc0> beq $5,$0,00400688 <events_update+0xd0>
00400680 <events_update+0xc8> addiu $3,$0,1
00400688 <events_update+0xd0> lbu $6,-32460($28)
00400690 <events_update+0xd8> addu $4,$0,$2
00400698 <events_update+0xe0> addu $5,$0,$3
004006a0 <events_update+0xe8> jal 004001f0 <EventUpdate>
ap_spi_2.c:407
}
004006a8 <events_update+0xf0> addu $29,$0,$30
004006b0 <events_update+0xf8> lw $31,20($29)
004006b8 <events_update+0x100> lw $30,16($29)
004006c0 <events_update+0x108> addiu $29,$29,24
004006c8 <events_update+0x110> jr $31
main():
ap_spi_2.c:416


/** autopilot/main.c */
/** \fn  void radio_control_task( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
// void radio_control_task( void )
int main()
{
004006d0 <main> addiu $29,$29,-24
004006d8 <main+0x8> sw $31,20($29)
004006e0 <main+0x10> sw $30,16($29)
004006e8 <main+0x18> addu $30,$0,$29
ap_spi_2.c:419
  //if (link_fbw_receive_valid)
  //{
    if (pprz_mode == PPRZ_MODE_AUTO1)
004006f0 <main+0x20> lbu $2,-32752($28)
004006f8 <main+0x28> addiu $3,$0,1
00400700 <main+0x30> bne $2,$3,004007e8 <main+0x118>
ap_spi_2.c:421
    {
      desired_roll = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_ROLL], 0., -0.6);
00400708 <main+0x38> lui $2,4096
00400710 <main+0x40> lh $2,1154($2)
00400718 <main+0x48> mtc1 $2,$f0
00400720 <main+0x50> cvt.s.w $f0,$f0
00400728 <main+0x58> l.s $f2,-32676($28)
00400730 <main+0x60> div.s $f0,$f0,$f2
00400738 <main+0x68> cvt.d.s $f2,$f0
00400740 <main+0x70> l.d $f4,-32672($28)
00400748 <main+0x78> mul.d $f0,$f2,$f4
00400750 <main+0x80> mtc1 $0,$f2
00400758 <main+0x88> mtc1 $0,$f3
00400760 <main+0x90> add.d $f0,$f0,$f2
00400768 <main+0x98> cvt.s.d $f2,$f0
00400770 <main+0xa0> s.s $f2,-32768($28)
ap_spi_2.c:422
      desired_pitch = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_PITCH], 0., 0.5);
00400778 <main+0xa8> lui $2,4096
00400780 <main+0xb0> lh $2,1156($2)
00400788 <main+0xb8> mtc1 $2,$f0
00400790 <main+0xc0> cvt.s.w $f0,$f0
00400798 <main+0xc8> l.s $f2,-32676($28)
004007a0 <main+0xd0> div.s $f0,$f0,$f2
004007a8 <main+0xd8> cvt.d.s $f2,$f0
004007b0 <main+0xe0> l.d $f4,-32664($28)
004007b8 <main+0xe8> mul.d $f0,$f2,$f4
004007c0 <main+0xf0> mtc1 $0,$f2
004007c8 <main+0xf8> mtc1 $0,$f3
004007d0 <main+0x100> add.d $f0,$f0,$f2
004007d8 <main+0x108> cvt.s.d $f2,$f0
004007e0 <main+0x110> s.s $f2,-32764($28)
ap_spi_2.c:424
    } // else asynchronously set by course_pid_run()
    if (pprz_mode == PPRZ_MODE_MANUAL || pprz_mode == PPRZ_MODE_AUTO1)
004007e8 <main+0x118> lbu $2,-32752($28)
004007f0 <main+0x120> beq $2,$0,00400818 <main+0x148>
004007f8 <main+0x128> lbu $2,-32752($28)
00400800 <main+0x130> addiu $3,$0,1
00400808 <main+0x138> beq $2,$3,00400818 <main+0x148>
00400810 <main+0x140> j 00400830 <main+0x160>
ap_spi_2.c:426
    {
      desired_gaz = from_fbw.channels[RADIO_THROTTLE];
00400818 <main+0x148> lui $2,4096
00400820 <main+0x150> lhu $2,1152($2)
00400828 <main+0x158> sh $2,-32482($28)
ap_spi_2.c:434
#ifdef ANTON_MAGICAL_MISTERY_GAINS     
      roll_pgain = ROLL_PGAIN * (1 - 5. / 7. * from_fbw.channels[RADIO_THROTTLE] / MAX_PPRZ);
      pitch_pgain = PITCH_PGAIN * ( 1 - 1. / 3. * from_fbw.channels[RADIO_THROTTLE] / MAX_PPRZ);
#endif /* ANTON_MAGICAL_MISTERY_GAINS */
    }
    // else asynchronously set by climb_pid_run();

    mcu1_ppm_cpt = from_fbw.ppm_cpt;
00400830 <main+0x160> lui $2,4096
00400838 <main+0x168> lbu $2,1170($2)
00400840 <main+0x170> sb $2,-32544($28)
ap_spi_2.c:435
    vsupply = from_fbw.vsupply;
00400848 <main+0x178> lui $2,4096
00400850 <main+0x180> lbu $2,1173($2)
00400858 <main+0x188> sb $2,-32451($28)
ap_spi_2.c:437

    events_update();
00400860 <main+0x190> jal 004005b8 <events_update>
ap_spi_2.c:439

    if (!estimator_flight_time)
00400868 <main+0x198> lhu $2,-32496($28)
00400870 <main+0x1a0> bne $2,$0,00400880 <main+0x1b0>
ap_spi_2.c:441
    {
      ground_calibrate();
00400878 <main+0x1a8> jal 00400368 <ground_calibrate>
ap_spi_2.c:444
    }
  //}
}
00400880 <main+0x1b0> addu $29,$0,$30
00400888 <main+0x1b8> lw $31,20($29)
00400890 <main+0x1c0> lw $30,16($29)
00400898 <main+0x1c8> addiu $29,$29,24
004008a0 <main+0x1d0> jr $31
004008a8 <main+0x1d8> nop 
